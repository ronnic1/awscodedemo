version: 0.2

#env:
#  variables:
#    key: "value"
#    key: "value"

phases:
  install:
    commands:
      - sudo pip install boto3
      - wget https://releases.hashicorp.com/terraform/0.13.0/terraform_0.13.0_linux_amd64.zip
      - unzip terraform_0.13.0_linux_amd64.zip
      - sudo mv terraform /bin
      - rm terraform_0.13.0_linux_amd64.zip
      - apt-get update
      - apt-cache search source
      - apt-get install -y curl jq
      - curl 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI | jq 'to_entries | [ .[] | select(.key | (contains("Expiration") or contains("RoleArn"))  | not) ] |  map(if .key == "AccessKeyId" then . + {"key":"AWS_ACCESS_KEY_ID"} else . end) | map(if .key == "SecretAccessKey" then . + {"key":"AWS_SECRET_ACCESS_KEY"} else . end) | map(if .key == "Token" then . + {"key":"AWS_SESSION_TOKEN"} else . end) | map("export \(.key)=\(.value)") | .[]' -r > /tmp/aws_cred_export.txt # work around https://github.com/hashicorp/terraform/issues/8746
      - echo "Prepare terraform file"
      - echo "terraform { " >> provider.tf
      - echo "   backend \"s3\" { " >> provider.tf
      - echo "   bucket = \"$datapart.$region.terraform-state-software\"" >> provider.tf
      - echo "   key    = \"$applicationname/terraform.tfstate\"" >> provider.tf
      - echo "   region = \"$region\"" >> provider.tf
      - echo "  }" >> provider.tf
      - echo "}" >> provider.tf
      - cat provider.tf
      - . /tmp/aws_cred_export.txt && terraform init
  build:
    commands:
      - . /tmp/aws_cred_export.txt &&  python runterraform.js.py $region $applicationname $destroy
      - echo "Post apply build"
  post_build:
    commands:
      - echo "Nothing to do in the post_build for now"
